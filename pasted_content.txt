Create an advanced, web-based Ultimate Ludo Game in a single HTML file using only HTML5, CSS3, and JavaScript (no external libraries or frameworks unless absolutely necessary and lightweight, like a small utility library if needed for specific complex math or animation not easily done with vanilla JS).

✅ Core Functionalities
make a player profile once the player join game they get 5000 coins , 100 diamonds , and a popup welcome to ai ludo
if user did not open game a week make another pop up notification for that time that player, welcome back to ludo
    Each player has 4 tokens, which start at home (position: -1).

on top off the page right side setting icon placed where these settings plyer can do sound toggle on/off music toggle on/off
DO NOT SPECTATE
don’t allow your friends to spectate your games toggle bar on/off
DO NOT FOLLOW
don’t aloow you friends to follow you into the chatrooms , and you can not follow your friends to enter the chatrooms toggle bar on/off
HIDE NATIONALITY
make your nationality only visible to yourself toggle bar on/off
HIDE BIRTHDAY
others can not see your birthday but you can still recive birthday but you can still recive birthday gifts from a friend toggle bar on/off
BLOCK FRIEND REQUESTS
YOU will no longer recive friend requests within 7 days toggle bar on/off
support button
self service
retrive account button payment issue button violation appeal button app suggestion button
hot questions search icon

why did I not get the legend star? the number of legend star is wrong?
answer
dear user,
the top 40 in the league can get the coreesponding legend stars , top1: 4 stars, top 2 : 3stars top 3 : 2 stars top 4-10 : 1 star top 11-40 : legend star frame
you can cheack your league , final rank, and rewards in the system massage sent after the season settlement



✅ Player Profile & Customization:
    Player Name: Input by the user.
    Avatar: Predefined selectable avatars or a simple color choice.
    Game Statistics: Wins, losses, games played, win rate, tokens captured, etc.
    (Advanced) Unlockable Avatars/Themes: Earned through achievements or in-game currency.

✅ Game Modes:
    Classic Mode: Standard Ludo rules.
    Quick Mode: Faster gameplay (e.g., only 2 tokens per player, or start with one token out).
    (Advanced) Team Up (2v2): Players form teams.
    (Advanced) Private Rooms: Play with friends using a room code.

✅ AI Opponents:
    Implement basic AI for offline play.
    (Advanced) Multiple AI difficulty levels.

✅ UI/UX Enhancements:
    Clear visual distinction for player colors, tokens, and paths.
    Smooth animations for dice rolls and token movements.
    Sound effects for dice rolls, token movement, captures, winning, etc. (can be simple beeps or use free sound assets if allowed by single-file constraint).
    Intuitive interface for rolling dice and selecting tokens.
    Display current player turn clearly.
    Show dice roll result prominently.
    (Advanced) Emotes or quick chat options for multiplayer.

✅ Technical Requirements:
    Single HTML File: All HTML, CSS, and JavaScript must be embedded within one .html file.
    Responsive Design: The game should be playable on different screen sizes (desktop and mobile browsers).
    Vanilla JavaScript: Prioritize using plain JavaScript. If a small utility is essential, it must be embeddable.
    Save/Load Game State: Use localStorage to save the current game state so players can resume later.
    Error Handling: Basic error handling for invalid moves or game states.

## Detailed Breakdown:

### 1. HTML Structure (index.html - this will be the single file)
    Main container for the game.
    Game board area (can be SVG or CSS-styled divs).
    Player areas (home bases, start positions).
    Dice display area.
    Roll dice button.
    Player information display (current turn, tokens home, etc.).
    Modals/Pop-ups for game start, game over, settings, player selection.
    (Advanced) Chat/Emote area for multiplayer.

### 2. CSS Styling (Embedded in `<style>` tags)
    Styling for the game board, paths, safe zones, home areas.
    Token styling (colors, shapes).
    Dice appearance.
    Button styling.
    Responsive design media queries.
    Animations for dice roll and token movement (CSS transitions/animations).

### 3. JavaScript Logic (Embedded in `<script>` tags)

    #### a. Game Setup & State Management:
        `gameState` object: players, tokens (positions, state: home, active, finished), currentPlayerIndex, diceValue, gameMode, etc.
        Initialize game: Set up players, tokens in home positions.
        Function to save and load game state from localStorage.

    #### b. Core Game Logic:
        Dice rolling function (random number 1-6).
        Token movement logic:
            Check valid moves based on dice roll.
            Handle moving tokens out of home (requires a 6).
            Move tokens along the path.
            Handle landing on opponent’s token (capture).
            Handle landing on safe zones.
            Handle reaching the home stretch and final home position.
            Check for win condition (all tokens of a player are home).
        Turn management: Switch to the next player.
        (Advanced) AI logic for computer players.

    #### c. UI Interaction & Rendering:
        Render game board and tokens based on `gameState`.
        Update UI for dice rolls, token movements, player turns.
        Event listeners for dice roll button and token clicks.
        Highlight selectable tokens.
        Display game messages (e.g., "Player X's turn", "Player Y captured a token").
        Show game over screen with winner and options to restart.

    #### d. (Advanced) Multiplayer Logic (if attempting private rooms):
        Basic signaling for room creation/joining (could be very rudimentary without a server, e.g., sharing game state manually or via a simple peer-to-peer library if allowed).
        Synchronizing game state between players (challenging in a single HTML file without a backend).

## Development Steps Suggestion:

1.  **Basic HTML Structure & CSS:** Create the visual layout of the board, player areas, and dice.
2.  **Core Game State:** Implement the `gameState` object and basic initialization.
3.  **Dice Roll:** Implement dice rolling and display.
4.  **Token Rendering:** Display tokens on the board based on their state.
5.  **Basic Token Movement:** Implement logic for moving a single token on the main path (no special rules yet).
6.  **Turn Management:** Switch turns between players.
7.  **Full Token Movement Logic:** Add rules for getting out of home, captures, safe zones, reaching home.
8.  **Win Condition:** Check and announce the winner.
9.  **UI Polish:** Add animations, sound effects, and improve visual feedback.
10. **AI Player:** Implement basic AI.
11. **Save/Load Game:** Implement localStorage functionality.
12. **(Advanced Features):** Tackle quick mode, team-up, private rooms if time and complexity allow.

This is a substantial project for a single HTML file, so focus on getting the core Ludo mechanics working perfectly first. Good luck!
